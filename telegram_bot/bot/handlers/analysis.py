"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–ª—å–º–æ–≤.
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞, –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–∞—Ö.
"""

import re
import asyncio
from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from loguru import logger

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from config import get_config
from bot.services.sentiment_service import get_sentiment_service
from bot.services.visualization_service import get_visualization_service

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
analysis_router = Router()

@analysis_router.message(Command("search"))
async def cmd_search(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤."""
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_text = message.text
    if not command_text or len(command_text.split()) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\\n\\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /search <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞>\\n"
            "–ü—Ä–∏–º–µ—Ä: /search –û–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä"
        )
        return
    
    movie_name = " ".join(command_text.split()[1:])
    logger.info(f"–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞: {movie_name}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ
    search_msg = await message.answer(f"üîç –ò—â—É —Ñ–∏–ª—å–º: <b>{movie_name}</b>...")
    
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        search_results = await mock_search_movies(movie_name)
        
        if not search_results:
            await search_msg.edit_text(
                f"üòî –§–∏–ª—å–º <b>{movie_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.\\n\\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ\\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\\n"
                "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        if len(search_results) == 1:
            movie = search_results[0]
            result_text = format_single_movie_result(movie)
            keyboard = create_movie_action_keyboard(movie['id'])
        else:
            result_text = format_multiple_movies_result(search_results, movie_name)
            keyboard = None
        
        await search_msg.edit_text(result_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞ {movie_name}: {e}")
        await search_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.\\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

@analysis_router.message(Command("analyze"))
async def cmd_analyze(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ —Ñ–∏–ª—å–º–∞."""
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ñ–∏–ª—å–º–∞
    command_text = message.text
    if not command_text or len(command_text.split()) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\\n\\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /analyze <ID —Ñ–∏–ª—å–º–∞>\\n"
            "–ü—Ä–∏–º–µ—Ä: /analyze 1318972\\n\\n"
            "–ù–∞–π—Ç–∏ ID —Ñ–∏–ª—å–º–∞: /search –Ω–∞–∑–≤–∞–Ω–∏–µ"
        )
        return
    
    try:
        movie_id = int(command_text.split()[1])
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ñ–∏–ª—å–º–∞</b>\\n\\n"
            "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\\n"
            "–ü—Ä–∏–º–µ—Ä: /analyze 1318972"
        )
        return
    
    logger.info(f"–ê–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å–º–∞ ID: {movie_id}")
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    analysis_msg = await message.answer(
        f"üìä <b>–ê–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å–º–∞ ID: {movie_id}</b>\\n\\n"
        "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã...\\n"
        "<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥</i>"
    )
    
    try:
        config = get_config()
        sentiment_service = get_sentiment_service(config)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        movie_analysis = sentiment_service.get_movie_sentiment_stats(movie_id)
        
        if not movie_analysis:
            await analysis_msg.edit_text(
                f"üòî <b>–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å–º–∞ ID: {movie_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\\n\\n"
                "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\\n"
                "‚Ä¢ –§–∏–ª—å–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\\n"
                "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ñ–∏–ª—å–º–∞\\n"
                "‚Ä¢ –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\\n\\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º: /search –Ω–∞–∑–≤–∞–Ω–∏–µ"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
        analysis_text = sentiment_service.format_sentiment_summary(movie_id)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä –ì—Ä–∞—Ñ–∏–∫–∏", 
                    callback_data=f"charts_{movie_id}"
                ),
                InlineKeyboardButton(
                    text="‚òÅÔ∏è –û–±–ª–∞–∫–æ —Å–ª–æ–≤", 
                    callback_data=f"wordcloud_{movie_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìà –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
                    callback_data=f"summary_{movie_id}"
                )
            ]
        ])
        
        await analysis_msg.edit_text(analysis_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–ª—å–º–∞ {movie_id}: {e}")
        await analysis_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.\\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ñ–∏–ª—å–º–∞."
        )

@analysis_router.message(Command("movie"))
async def cmd_movie_info(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ."""
    command_text = message.text
    if not command_text or len(command_text.split()) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\\n\\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /movie <ID —Ñ–∏–ª—å–º–∞>\\n"
            "–ü—Ä–∏–º–µ—Ä: /movie 1318972"
        )
        return
    
    try:
        movie_id = int(command_text.split()[1])
    except ValueError:
        await message.answer("‚ùå ID —Ñ–∏–ª—å–º–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ ID: {movie_id}")
    
    info_msg = await message.answer(f"üé¨ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ ID: {movie_id}...")
    
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        movie_info = await mock_get_movie_info(movie_id)
        
        if not movie_info:
            await info_msg.edit_text(
                f"üòî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ ID: {movie_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
        info_text = format_movie_info(movie_info)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã", 
                    callback_data=f"analyze_{movie_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìà –ì—Ä–∞—Ñ–∏–∫–∏", 
                    callback_data=f"charts_{movie_id}"
                ),
                InlineKeyboardButton(
                    text="‚òÅÔ∏è –û–±–ª–∞–∫–æ —Å–ª–æ–≤", 
                    callback_data=f"wordcloud_{movie_id}"
                )
            ]
        ])
        
        await info_msg.edit_text(info_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ {movie_id}: {e}")
        await info_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
@analysis_router.callback_query(F.data.startswith("analyze_"))
async def callback_analyze(callback):
    """Callback –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–ª—å–º–∞."""
    movie_id = callback.data.split("_")[1]
    await callback.message.edit_text(
        f"üìä –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥–æ–π:\\n/analyze {movie_id}",
        reply_markup=None
    )
    await callback.answer()

@analysis_router.callback_query(F.data.startswith("charts_"))
async def callback_charts(callback):
    """Callback –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤."""
    movie_id = callback.data.split("_")[1]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", 
                callback_data=f"chart_{movie_id}_sentiment"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚≠ê –†–µ–π—Ç–∏–Ω–≥–∏", 
                callback_data=f"chart_{movie_id}_ratings"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìä –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑", 
                callback_data=f"chart_{movie_id}_summary"
            )
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_analyze_{movie_id}")
        ]
    ])
    
    await callback.message.edit_text(
        f"üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Ñ–∏–ª—å–º–∞ ID: {movie_id}</b>",
        reply_markup=keyboard
    )
    await callback.answer()

@analysis_router.callback_query(F.data.startswith("wordcloud_"))
async def callback_wordcloud(callback):
    """Callback –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤."""
    movie_id = int(callback.data.split("_")[1])
    
    await callback.message.edit_text(
        f"‚òÅÔ∏è –°–æ–∑–¥–∞—é –æ–±–ª–∞–∫–æ —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å–º–∞ ID: {movie_id}...\\n"
        "<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</i>"
    )
    
    try:
        config = get_config()
        sentiment_service = get_sentiment_service(config)
        viz_service = get_visualization_service(config)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞
        movie_analysis = sentiment_service.get_movie_sentiment_stats(movie_id)
        
        if not movie_analysis:
            await callback.message.edit_text(
                f"üòî –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\\n"
                f"ID —Ñ–∏–ª—å–º–∞: {movie_id}"
            )
            await callback.answer()
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤
        wordcloud_buffer = viz_service.create_wordcloud(
            movie_analysis.reviews_sample, 
            movie_analysis.movie_title
        )
        
        if wordcloud_buffer:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            photo = BufferedInputFile(
                wordcloud_buffer.read(),
                filename=f"wordcloud_{movie_id}.png"
            )
            
            await callback.message.answer_photo(
                photo=photo,
                caption=f"‚òÅÔ∏è <b>–û–±–ª–∞–∫–æ —Å–ª–æ–≤: {movie_analysis.movie_title}</b>\\n"
                       f"üìù –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ {movie_analysis.total_reviews} –æ—Ç–∑—ã–≤–∞—Ö"
            )
            
            await callback.message.edit_text(
                "‚úÖ –û–±–ª–∞–∫–æ —Å–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ã—à–µ"
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±–ª–∞–∫–æ —Å–ª–æ–≤\\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤ –¥–ª—è {movie_id}: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤"
        )
    
    await callback.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)

async def mock_search_movies(query: str) -> list:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤."""
    # –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
    await asyncio.sleep(1)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_movies = {
        "–æ–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä": [
            {
                "id": 1318972,
                "title": "–û–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä",
                "original_title": "Oppenheimer",
                "year": 2023,
                "rating": 8.2,
                "genres": ["–¥—Ä–∞–º–∞", "–±–∏–æ–≥—Ä–∞—Ñ–∏—è", "–∏—Å—Ç–æ—Ä–∏—è"],
                "description": "–ë–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ç—Ä–∏–ª–ª–µ—Ä –æ –∂–∏–∑–Ω–∏ —Ñ–∏–∑–∏–∫–∞ –†–æ–±–µ—Ä—Ç–∞ –û–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä–∞"
            }
        ],
        "–±–∞—Ä–±–∏": [
            {
                "id": 1202258,
                "title": "–ë–∞—Ä–±–∏",
                "original_title": "Barbie",
                "year": 2023,
                "rating": 7.1,
                "genres": ["–∫–æ–º–µ–¥–∏—è", "—Ñ—ç–Ω—Ç–µ–∑–∏"],
                "description": "–ö—É–∫–ª–∞ –ë–∞—Ä–±–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω—ã–π –º–∏—Ä"
            }
        ],
        "—á–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫": [
            {
                "id": 1143242,
                "title": "–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫: –ü–∞—É—Ç–∏–Ω–∞ –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö",
                "original_title": "Spider-Man: Across the Spider-Verse", 
                "year": 2023,
                "rating": 8.5,
                "genres": ["–º—É–ª—å—Ç—Ñ–∏–ª—å–º", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–±–æ–µ–≤–∏–∫"],
                "description": "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –ú–∞–π–ª–∑–∞ –ú–æ—Ä–∞–ª–µ—Å–∞"
            }
        ]
    }
    
    query_lower = query.lower()
    for key, movies in test_movies.items():
        if key in query_lower:
            return movies
    
    return []

async def mock_get_movie_info(movie_id: int) -> dict:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ."""
    await asyncio.sleep(1)
    
    test_info = {
        1318972: {
            "id": 1318972,
            "title": "–û–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä",
            "original_title": "Oppenheimer",
            "year": 2023,
            "rating": 8.2,
            "duration": 180,
            "genres": ["–¥—Ä–∞–º–∞", "–±–∏–æ–≥—Ä–∞—Ñ–∏—è", "–∏—Å—Ç–æ—Ä–∏—è"],
            "country": ["–°–®–ê"],
            "director": "–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ù–æ–ª–∞–Ω",
            "description": "–ë–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ç—Ä–∏–ª–ª–µ—Ä –æ –∂–∏–∑–Ω–∏ —Ñ–∏–∑–∏–∫–∞ –†–æ–±–µ—Ä—Ç–∞ –û–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä–∞, —Ä—É–∫–æ–≤–æ–¥–∏–≤—à–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞—Ç–æ–º–Ω–æ–π –±–æ–º–±—ã."
        },
        1202258: {
            "id": 1202258,
            "title": "–ë–∞—Ä–±–∏",
            "original_title": "Barbie",
            "year": 2023,
            "rating": 7.1,
            "duration": 114,
            "genres": ["–∫–æ–º–µ–¥–∏—è", "—Ñ—ç–Ω—Ç–µ–∑–∏"],
            "country": ["–°–®–ê"],
            "director": "–ì—Ä–µ—Ç–∞ –ì–µ—Ä–≤–∏–≥",
            "description": "–ö—É–∫–ª–∞ –ë–∞—Ä–±–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω—ã–π –º–∏—Ä, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å—á–∞—Å—Ç—å–µ."
        }
    }
    
    return test_info.get(movie_id)

def format_single_movie_result(movie: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞."""
    return f"""üé¨ <b>–§–∏–ª—å–º –Ω–∞–π–¥–µ–Ω!</b>

<b>{movie['title']}</b> ({movie['original_title']})
üìÖ {movie['year']} ‚Ä¢ ‚≠ê {movie['rating']}/10
üé≠ {', '.join(movie['genres'])}
üìñ {movie['description']}

üÜî ID: {movie['id']}"""

def format_multiple_movies_result(movies: list, query: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å–º–æ–≤."""
    result = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {query}</b>\\n\\n"
    
    for i, movie in enumerate(movies[:5], 1):  # –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result += f"{i}. <b>{movie['title']}</b> ({movie['original_title']})\\n"
        result += f"üìÖ {movie['year']} ‚Ä¢ ‚≠ê {movie['rating']}/10\\n"
        result += f"üé≠ {', '.join(movie['genres'])}\\n"
        result += f"üÜî ID: {movie['id']}\\n\\n"
    
    result += "üí° –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /analyze ID"
    return result

def format_movie_info(movie: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ."""
    return f"""üé¨ <b>{movie['title']}</b>

üìå <b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {movie['original_title']}
üìÖ <b>–ì–æ–¥:</b> {movie['year']}
‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {movie['rating']}/10
‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {movie['duration']} –º–∏–Ω
üé≠ <b>–ñ–∞–Ω—Ä—ã:</b> {', '.join(movie['genres'])}
üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {', '.join(movie['country'])}
üé¨ <b>–†–µ–∂–∏—Å—Å—ë—Ä:</b> {movie['director']}

üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{movie['description']}

üÜî <b>ID –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</b> {movie['id']}"""

def create_movie_action_keyboard(movie_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ñ–∏–ª—å–º–∞."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã", 
                callback_data=f"analyze_{movie_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìà –ì—Ä–∞—Ñ–∏–∫–∏", 
                callback_data=f"charts_{movie_id}"
            ),
            InlineKeyboardButton(
                text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", 
                callback_data=f"info_{movie_id}"
            )
        ]
    ])