"""
–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞.
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ VADER Sentiment Analysis.
"""

import pandas as pd
import numpy as np
from pathlib import Path
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
import logging
from loguru import logger

# –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º
import sys
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))

@dataclass
class SentimentResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π."""
    positive: float
    negative: float
    neutral: float
    compound: float
    
    @property
    def dominant_sentiment(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."""
        if self.compound >= 0.05:
            return "positive"
        elif self.compound <= -0.05:
            return "negative"
        else:
            return "neutral"
    
    @property
    def sentiment_emoji(self) -> str:
        """–≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."""
        if self.dominant_sentiment == "positive":
            return "üòä"
        elif self.dominant_sentiment == "negative":
            return "üòû"
        else:
            return "üòê"

@dataclass
class MovieAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–ª—å–º–∞."""
    movie_id: int
    movie_title: str
    total_reviews: int
    avg_rating: float
    sentiment_stats: Dict[str, float]
    reviews_sample: List[str]
    sentiment_scores: List[float]

class SentimentService:
    """–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –æ—Ç–∑—ã–≤–æ–≤."""
    
    def __init__(self, config=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.config = config
        self.analyzer = SentimentIntensityAnalyzer()
        self._existing_data: Optional[pd.DataFrame] = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logger.bind(service="sentiment")
        
    def load_existing_data(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞."""
        try:
            if self.config and self.config.use_existing_data:
                data_file = self.config.existing_data_file
                if data_file.exists():
                    self._existing_data = pd.read_csv(data_file)
                    self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {len(self._existing_data)} –æ—Ç–∑—ã–≤–æ–≤")
                    return True
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            possible_paths = [
                Path("../data/processed/reviews_2023_final.csv"),
                Path("data/processed/reviews_2023_final.csv"),
                Path("../data/processed/reviews_2023_cleaned.csv"),
                Path("data/processed/reviews_2023_cleaned.csv")
            ]
            
            for path in possible_paths:
                if path.exists():
                    self._existing_data = pd.read_csv(path)
                    self.logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {path} ({len(self._existing_data)} –æ—Ç–∑—ã–≤–æ–≤)")
                    return True
            
            self.logger.warning("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–∞—Ä—Å–∏–Ω–≥")
            return False
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def analyze_text(self, text: str) -> SentimentResult:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
        try:
            scores = self.analyzer.polarity_scores(text)
            return SentimentResult(
                positive=scores['pos'],
                negative=scores['neg'],
                neutral=scores['neu'],
                compound=scores['compound']
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return SentimentResult(0.0, 0.0, 1.0, 0.0)
    
    def analyze_reviews_batch(self, reviews: List[str]) -> List[SentimentResult]:
        """–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤."""
        results = []
        for review in reviews:
            result = self.analyze_text(review)
            results.append(result)
        return results
    
    def get_movie_sentiment_stats(self, movie_id: int) -> Optional[MovieAnalysis]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å–º–∞."""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            if self._existing_data is not None:
                movie_data = self._existing_data[
                    self._existing_data['movie_id'] == movie_id
                ] if 'movie_id' in self._existing_data.columns else None
                
                if movie_data is not None and len(movie_data) > 0:
                    return self._analyze_existing_data(movie_data, movie_id)
            
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None (–ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥)
            self.logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å–º–∞ {movie_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–ª—å–º–∞ {movie_id}: {e}")
            return None
    
    def _analyze_existing_data(self, movie_data: pd.DataFrame, movie_id: int) -> MovieAnalysis:
        """–ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞."""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞
        movie_title = movie_data['movie_title'].iloc[0] if 'movie_title' in movie_data.columns else f"–§–∏–ª—å–º {movie_id}"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
        review_column = self._find_review_column(movie_data)
        reviews = movie_data[review_column].dropna().tolist()
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        sentiment_results = self.analyze_reviews_batch(reviews)
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_reviews = len(reviews)
        positive_count = sum(1 for r in sentiment_results if r.dominant_sentiment == "positive")
        negative_count = sum(1 for r in sentiment_results if r.dominant_sentiment == "negative")
        neutral_count = sum(1 for r in sentiment_results if r.dominant_sentiment == "neutral")
        
        sentiment_stats = {
            "positive_percent": (positive_count / total_reviews) * 100,
            "negative_percent": (negative_count / total_reviews) * 100,
            "neutral_percent": (neutral_count / total_reviews) * 100,
            "avg_compound": np.mean([r.compound for r in sentiment_results])
        }
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        rating_column = self._find_rating_column(movie_data)
        avg_rating = movie_data[rating_column].mean() if rating_column else 0.0
        
        # –í—ã–±–æ—Ä–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        reviews_sample = reviews[:10] if len(reviews) >= 10 else reviews
        sentiment_scores = [r.compound for r in sentiment_results]
        
        return MovieAnalysis(
            movie_id=movie_id,
            movie_title=movie_title,
            total_reviews=total_reviews,
            avg_rating=avg_rating,
            sentiment_stats=sentiment_stats,
            reviews_sample=reviews_sample,
            sentiment_scores=sentiment_scores
        )
    
    def _find_review_column(self, df: pd.DataFrame) -> str:
        """–ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ —Å –æ—Ç–∑—ã–≤–∞–º–∏."""
        possible_columns = ['review_text', 'review', 'text', 'content', 'comment']
        for col in possible_columns:
            if col in df.columns:
                return col
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
        text_columns = df.select_dtypes(include=['object']).columns
        return text_columns[0] if len(text_columns) > 0 else df.columns[0]
    
    def _find_rating_column(self, df: pd.DataFrame) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏."""
        possible_columns = ['rating', 'score', 'user_rating', 'grade']
        for col in possible_columns:
            if col in df.columns:
                return col
        return None
    
    def get_sentiment_distribution(self, movie_id: int) -> Optional[Dict[str, int]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."""
        analysis = self.get_movie_sentiment_stats(movie_id)
        if not analysis:
            return None
        
        total = analysis.total_reviews
        return {
            "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ": int(analysis.sentiment_stats["positive_percent"] * total / 100),
            "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ": int(analysis.sentiment_stats["negative_percent"] * total / 100), 
            "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ": int(analysis.sentiment_stats["neutral_percent"] * total / 100)
        }
    
    def format_sentiment_summary(self, movie_id: int) -> Optional[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞."""
        analysis = self.get_movie_sentiment_stats(movie_id)
        if not analysis:
            return None
        
        summary = f"""üìä <b>–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {analysis.movie_title}</b>

üìù <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {analysis.total_reviews}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {analysis.avg_rating:.1f}/10

üòä <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:</b>
‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ: {analysis.sentiment_stats['positive_percent']:.1f}%
‚Ä¢ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: {analysis.sentiment_stats['negative_percent']:.1f}%
‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: {analysis.sentiment_stats['neutral_percent']:.1f}%

üìà <b>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:</b> {analysis.sentiment_stats['avg_compound']:.3f}
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        avg_compound = analysis.sentiment_stats['avg_compound']
        if avg_compound >= 0.1:
            summary += "‚úÖ <i>–û–±—â–µ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ</i>"
        elif avg_compound <= -0.1:
            summary += "‚ùå <i>–û–±—â–µ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ</i>"
        else:
            summary += "üòê <i>–û–±—â–µ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ</i>"
        
        return summary

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_sentiment_service: Optional[SentimentService] = None

def get_sentiment_service(config=None) -> SentimentService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)."""
    global _sentiment_service
    if _sentiment_service is None:
        _sentiment_service = SentimentService(config)
        _sentiment_service.load_existing_data()
    return _sentiment_service

if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞."""
    service = SentimentService()
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
    test_texts = [
        "–û—Ç–ª–∏—á–Ω—ã–π —Ñ–∏–ª—å–º, –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è!",
        "–£–∂–∞—Å–Ω—ã–π —Ñ–∏–ª—å–º, –≤—Ä–µ–º—è –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –∑—Ä—è",
        "–û–±—ã—á–Ω—ã–π —Ñ–∏–ª—å–º, –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ"
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π:")
    for text in test_texts:
        result = service.analyze_text(text)
        print(f"–¢–µ–∫—Å—Ç: {text}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result.dominant_sentiment} ({result.compound:.3f})")
        print(f"–≠–º–æ–¥–∑–∏: {result.sentiment_emoji}")
        print("---")
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if service.load_existing_data():
        print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")