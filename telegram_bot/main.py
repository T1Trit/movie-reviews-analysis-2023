"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Telegram –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ —Ñ–∏–ª—å–º–æ–≤.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ movie-reviews-analysis-2023.
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from loguru import logger

from config import get_config, init_directories, validate_config


async def on_startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ —Ñ–∏–ª—å–º–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    init_directories()
    logger.info("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    # TODO: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ)
    logger.info("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
    
    # TODO: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ)
    logger.info("üíæ –ö—ç—à –≥–æ—Ç–æ–≤")
    
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


async def on_shutdown():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    
    # TODO: –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    
    logger.info("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    config = get_config()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.remove()
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.add(
        sys.stdout,
        level=config.logging.level,
        format=config.logging.format,
        colorize=True
    )
    
    # –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.add(
        config.logging.file,
        level=config.logging.level,
        format=config.logging.format,
        rotation=config.logging.rotation,
        retention=config.logging.retention,
        compression="zip"
    )
    
    # –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ª–æ–≥–æ–≤ Python
    class InterceptHandler(logging.Handler):
        def emit(self, record):
            try:
                level = logger.level(record.levelname).name
            except ValueError:
                level = record.levelno
            
            frame, depth = logging.currentframe(), 2
            while frame.f_code.co_filename == logging.__file__:
                frame = frame.f_back
                depth += 1
                
            logger.opt(depth=depth, exception=record.exc_info).log(
                level, record.getMessage()
            )
    
    logging.basicConfig(handlers=[InterceptHandler()], level=0, force=True)


async def create_bot_and_dispatcher() -> tuple[Bot, Dispatcher]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
    config = get_config()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = Bot(
        token=config.token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp = Dispatcher()
    
    # TODO: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ)
    # from bot.handlers import routers
    # for router in routers:
    #     dp.include_router(router)
    
    # –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from aiogram import Router
    from aiogram.types import Message
    from aiogram.filters import Command
    
    test_router = Router()
    
    @test_router.message(Command("start"))
    async def cmd_start(message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start."""
        await message.answer(
            "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ —Ñ–∏–ª—å–º–æ–≤!</b>\\n\\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã –∫ —Ñ–∏–ª—å–º–∞–º —Å –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞.\\n\\n"
            "üîß <i>–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∞</i>\\n"
            "üìä <i>–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>\\n\\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )
    
    @test_router.message(Command("help"))
    async def cmd_help(message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /help."""
        help_text = (
            "ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\\n\\n"
            "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\\n"
            "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\\n\\n"
            "üöß <i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:</i>\\n"
            "‚Ä¢ /search - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤\\n"
            "‚Ä¢ /analyze - –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤\\n"
            "‚Ä¢ /chart - –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤\\n"
            "‚Ä¢ /wordcloud - –û–±–ª–∞–∫–æ —Å–ª–æ–≤"
        )
        await message.answer(help_text)
    
    @test_router.message(Command("status"))
    async def cmd_status(message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ /status."""
        config = get_config()
        status_text = (
            "üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\\n\\n"
            f"‚úÖ –í–µ—Ä—Å–∏—è: 1.0 (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)\\n"
            f"‚úÖ –†–µ–∂–∏–º: {'Webhook' if config.webhook_mode else 'Long Polling'}\\n"
            f"‚úÖ Debug: {'–í–∫–ª—é—á–µ–Ω' if config.debug else '–í—ã–∫–ª—é—á–µ–Ω'}\\n"
            f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏: {'–î–∞' if config.use_existing_data else '–ù–µ—Ç'}\\n"
            f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {config.project_root.name}\\n\\n"
            "üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º —É—Å–ø–µ—à–Ω–∞!"
        )
        await message.answer(status_text)
    
    dp.include_router(test_router)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—É–∫–æ–≤
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    return bot, dp


async def run_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling."""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long polling...")
    
    bot, dp = await create_bot_and_dispatcher()
    
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await bot.session.close()


async def run_webhook():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook."""
    config = get_config()
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ {config.webhook_url}")
    
    bot, dp = await create_bot_and_dispatcher()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    await bot.set_webhook(
        url=f"{config.webhook_url}{config.webhook_path}",
        allowed_updates=dp.resolve_used_update_types()
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = web.Application()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ webhook
    webhook_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot
    )
    webhook_handler.register(app, path=config.webhook_path)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setup_application(app, dp, bot=bot)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    app.router.add_get("/health", health_check)
    
    return app


async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞."""
    config = get_config()
    return web.json_response({
        "status": "ok", 
        "service": "movie-reviews-bot",
        "version": "1.0",
        "integration": "movie-reviews-analysis-2023",
        "data_integration": config.use_existing_data
    })


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        logger.info("üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validate_config()
        logger.info("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        
        config = get_config()
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
        logger.info(f"üé¨ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ —Ñ–∏–ª—å–º–æ–≤")
        logger.info(f"üìÇ –ü—Ä–æ–µ–∫—Ç: {config.project_root}")
        logger.info(f"üîß –†–µ–∂–∏–º: {'Webhook' if config.webhook_mode else 'Long Polling'}")
        logger.info(f"üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏: {'–í–∫–ª—é—á–µ–Ω–∞' if config.use_existing_data else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        
        if config.webhook_mode:
            # –†–µ–∂–∏–º webhook
            app = asyncio.run(run_webhook())
            
            # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            web.run_app(
                app,
                host="0.0.0.0",
                port=config.webhook_port
            )
        else:
            # –†–µ–∂–∏–º polling
            asyncio.run(run_polling())
            
    except Exception as e:
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"\\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π: python check_setup.py")
        sys.exit(1)


if __name__ == "__main__":
    main()