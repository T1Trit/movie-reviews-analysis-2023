"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Telegram –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ —Ñ–∏–ª—å–º–æ–≤.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ movie-reviews-analysis-2023.
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from loguru import logger

from config import get_config, init_directories, validate_config
from bot.handlers import routers


async def on_startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ —Ñ–∏–ª—å–º–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    init_directories()
    logger.info("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    try:
        from bot.services.sentiment_service import get_sentiment_service
        from bot.services.visualization_service import get_visualization_service
        
        config = get_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        sentiment_service = get_sentiment_service(config)
        if sentiment_service.load_existing_data():
            logger.info("üìä –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        else:
            logger.info("üìä –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–±–µ–∑ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        viz_service = get_visualization_service(config)
        logger.info("üìà –°–µ—Ä–≤–∏—Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
    
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


async def on_shutdown():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    try:
        config = get_config()
        temp_dir = config.temp_path
        if temp_dir.exists():
            import shutil
            shutil.rmtree(temp_dir)
            logger.info("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    logger.info("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    config = get_config()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.remove()
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.add(
        sys.stdout,
        level=config.logging.level,
        format=config.logging.format,
        colorize=True
    )
    
    # –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.add(
        config.logging.file,
        level=config.logging.level,
        format=config.logging.format,
        rotation=config.logging.rotation,
        retention=config.logging.retention,
        compression="zip"
    )
    
    # –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ª–æ–≥–æ–≤ Python
    class InterceptHandler(logging.Handler):
        def emit(self, record):
            try:
                level = logger.level(record.levelname).name
            except ValueError:
                level = record.levelno
            
            frame, depth = logging.currentframe(), 2
            while frame.f_code.co_filename == logging.__file__:
                frame = frame.f_back
                depth += 1
                
            logger.opt(depth=depth, exception=record.exc_info).log(
                level, record.getMessage()
            )
    
    logging.basicConfig(handlers=[InterceptHandler()], level=0, force=True)


async def create_bot_and_dispatcher() -> tuple[Bot, Dispatcher]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
    config = get_config()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = Bot(
        token=config.token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
    for router in routers:
        dp.include_router(router)
        logger.info(f"üîó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Ä–æ—É—Ç–µ—Ä: {router.name if hasattr(router, 'name') else 'unnamed'}")
    
    logger.info(f"üìã –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–æ—É—Ç–µ—Ä–æ–≤: {len(routers)}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—É–∫–æ–≤
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    return bot, dp


async def run_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling."""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long polling...")
    
    bot, dp = await create_bot_and_dispatcher()
    
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await bot.session.close()


async def run_webhook():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook."""
    config = get_config()
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ {config.webhook_url}")
    
    bot, dp = await create_bot_and_dispatcher()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    await bot.set_webhook(
        url=f"{config.webhook_url}{config.webhook_path}",
        allowed_updates=dp.resolve_used_update_types()
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = web.Application()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ webhook
    webhook_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot
    )
    webhook_handler.register(app, path=config.webhook_path)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setup_application(app, dp, bot=bot)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    app.router.add_get("/health", health_check)
    app.router.add_get("/status", bot_status)
    
    return app


async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞."""
    config = get_config()
    return web.json_response({
        "status": "ok", 
        "service": "movie-reviews-bot",
        "version": "1.0",
        "integration": "movie-reviews-analysis-2023",
        "data_integration": config.use_existing_data,
        "timestamp": str(asyncio.get_event_loop().time())
    })


async def bot_status(request):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
    config = get_config()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    services_status = {}
    try:
        from bot.services.sentiment_service import get_sentiment_service
        sentiment_service = get_sentiment_service(config)
        services_status["sentiment"] = "ok" if sentiment_service else "error"
    except Exception:
        services_status["sentiment"] = "error"
    
    try:
        from bot.services.visualization_service import get_visualization_service
        viz_service = get_visualization_service(config)
        services_status["visualization"] = "ok" if viz_service else "error"
    except Exception:
        services_status["visualization"] = "error"
    
    return web.json_response({
        "bot": {
            "version": "1.0",
            "mode": "webhook" if config.webhook_mode else "polling",
            "debug": config.debug
        },
        "integration": {
            "project_root": str(config.project_root),
            "use_existing_data": config.use_existing_data,
            "data_file_exists": config.existing_data_file.exists() if config.use_existing_data else None
        },
        "services": services_status,
        "limits": {
            "requests_per_hour": config.limits.requests_per_hour,
            "max_reviews": config.kinopoisk.max_reviews
        },
        "handlers": len(routers),
        "timestamp": str(asyncio.get_event_loop().time())
    })


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logging()
        logger.info("üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validate_config()
        logger.info("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        
        config = get_config()
        
        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
        logger.info("üé¨ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ —Ñ–∏–ª—å–º–æ–≤")
        logger.info(f"üìÇ –ü—Ä–æ–µ–∫—Ç: {config.project_root}")
        logger.info(f"üîß –†–µ–∂–∏–º: {'Webhook' if config.webhook_mode else 'Long Polling'}")
        logger.info(f"üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏: {'–í–∫–ª—é—á–µ–Ω–∞' if config.use_existing_data else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        logger.info(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(routers)}")
        
        if config.webhook_mode:
            # –†–µ–∂–∏–º webhook
            app = asyncio.run(run_webhook())
            
            # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            web.run_app(
                app,
                host="0.0.0.0",
                port=config.webhook_port
            )
        else:
            # –†–µ–∂–∏–º polling
            asyncio.run(run_polling())
            
    except Exception as e:
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"\\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π: python check_setup.py")
        sys.exit(1)


if __name__ == "__main__":
    main()