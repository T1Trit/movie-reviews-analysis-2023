"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Telegram –±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ —Ñ–∏–ª—å–º–æ–≤.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ movie-reviews-analysis-2023.
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from typing import Optional
from dataclasses import dataclass
import sys

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

@dataclass
class DatabaseConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    url: str = "sqlite:///telegram_bot/data/bot.db"
    echo: bool = False
    
@dataclass 
class CacheConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è."""
    ttl: int = 3600
    max_size: int = 1000
    enabled: bool = True

@dataclass
class LoggingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    level: str = "INFO"
    file: str = "telegram_bot/logs/bot.log"
    format: str = "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>"
    rotation: str = "1 day"
    retention: str = "7 days"

@dataclass
class KinopoiskConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞."""
    delay: float = 2.0
    max_reviews: int = 50
    timeout: int = 30
    user_agent: str = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"

@dataclass
class LimitsConfig:
    """–õ–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    requests_per_hour: int = 10
    requests_per_day: int = 50
    concurrent_requests: int = 5

class BotConfig:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞."""
    
    def __init__(self):
        # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        self.token = os.getenv("BOT_TOKEN", "")
        
        # –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
        self.debug = os.getenv("DEBUG", "false").lower() == "true"
        self.webhook_mode = os.getenv("WEBHOOK_MODE", "false").lower() == "true"
        self.webhook_url = os.getenv("WEBHOOK_URL", "")
        self.webhook_port = int(os.getenv("WEBHOOK_PORT", "8443"))
        self.webhook_path = os.getenv("WEBHOOK_PATH", "/webhook")
        
        # –ü—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
        self.base_path = Path(__file__).parent
        self.project_root = self.base_path.parent  # –ö–æ—Ä–µ–Ω—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–æ—Ç–∞
        self.data_path = self.base_path / "data"
        self.charts_path = self.data_path / "charts" 
        self.wordclouds_path = self.data_path / "wordclouds"
        self.cache_path = self.data_path / "cache"
        self.logs_path = self.base_path / "logs"
        self.temp_path = self.data_path / "temp"
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º
        self.main_data_path = self.project_root / "data"
        self.processed_data_path = self.main_data_path / "processed"
        self.existing_data_file = self.processed_data_path / "reviews_2023_final.csv"
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.use_existing_data = os.getenv("USE_EXISTING_DATA", "true").lower() == "true"
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.database = DatabaseConfig(
            url=os.getenv("DATABASE_URL", "sqlite:///telegram_bot/data/bot.db"),
            echo=self.debug
        )
        
        self.cache = CacheConfig(
            ttl=int(os.getenv("CACHE_TTL", "3600")),
            max_size=int(os.getenv("CACHE_MAX_SIZE", "1000")),
            enabled=os.getenv("ENABLE_CACHE", "true").lower() == "true"
        )
        
        self.logging = LoggingConfig(
            level=os.getenv("LOG_LEVEL", "INFO"),
            file=os.getenv("LOG_FILE", "telegram_bot/logs/bot.log")
        )
        
        self.kinopoisk = KinopoiskConfig(
            delay=float(os.getenv("KINOPOISK_DELAY", "2.0")),
            max_reviews=int(os.getenv("MAX_REVIEWS_PER_MOVIE", "50")),
            timeout=int(os.getenv("REQUEST_TIMEOUT", "30"))
        )
        
        self.limits = LimitsConfig(
            requests_per_hour=int(os.getenv("MAX_REQUESTS_PER_HOUR", "10")),
            requests_per_day=int(os.getenv("MAX_REQUESTS_PER_DAY", "50")),
            concurrent_requests=int(os.getenv("MAX_CONCURRENT_REQUESTS", "5"))
        )
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        self.figure_dpi = int(os.getenv("FIGURE_DPI", "100"))
        self.figure_size = (
            int(os.getenv("FIGURE_SIZE_WIDTH", "12")),
            int(os.getenv("FIGURE_SIZE_HEIGHT", "8"))
        )
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        self.secret_key = os.getenv("SECRET_KEY", "default_secret_key")
        self.allowed_users = self._parse_user_list(os.getenv("ALLOWED_USERS", ""))
        self.admin_users = self._parse_user_list(os.getenv("ADMIN_USERS", ""))
        
        # –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        self.sentry_dsn = os.getenv("SENTRY_DSN", "")
        
    def _parse_user_list(self, users_str: str) -> list[int]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        if not users_str:
            return []
        return [int(user_id.strip()) for user_id in users_str.split(",") if user_id.strip()]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
_config: Optional[BotConfig] = None

def get_config() -> BotConfig:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Å–∏–Ω–≥–ª—Ç–æ–Ω)."""
    global _config
    if _config is None:
        _config = BotConfig()
    return _config

def init_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
    config = get_config()
    
    directories = [
        config.data_path,
        config.charts_path,
        config.wordclouds_path,
        config.cache_path,
        config.logs_path,
        config.temp_path
    ]
    
    for directory in directories:
        directory.mkdir(parents=True, exist_ok=True)
        
    print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: {len(directories)} –ø–∞–ø–æ–∫")

def validate_config():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    config = get_config()
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not config.token:
        errors.append("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    elif len(config.token) < 10:
        errors.append("‚ùå BOT_TOKEN —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
    elif not config.token.startswith(("1", "2", "5", "6")):
        errors.append("‚ùå BOT_TOKEN –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook —Ä–µ–∂–∏–º–∞
    if config.webhook_mode and not config.webhook_url:
        errors.append("‚ùå WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è webhook —Ä–µ–∂–∏–º–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º
    if config.use_existing_data and not config.existing_data_file.exists():
        errors.append(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {config.existing_data_file}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if not config.project_root.exists():
        errors.append(f"‚ùå –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config.project_root}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏
    try:
        test_file = config.data_path / "test_write.tmp"
        config.data_path.mkdir(parents=True, exist_ok=True)
        test_file.write_text("test")
        test_file.unlink()
    except Exception as e:
        errors.append(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    if errors:
        print("\n".join(errors))
        raise ValueError(f"–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {len(errors)} –ø—Ä–æ–±–ª–µ–º")
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")

def print_config_summary():
    """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    config = get_config()
    
    print("ü§ñ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram Bot")
    print("=" * 50)
    print(f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {'Webhook' if config.webhook_mode else 'Long Polling'}")
    print(f"Debug —Ä–µ–∂–∏–º: {'–í–∫–ª—é—á–µ–Ω' if config.debug else '–í—ã–∫–ª—é—á–µ–Ω'}")
    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {'–î–∞' if config.use_existing_data else '–ù–µ—Ç'}")
    print(f"–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: {config.limits.requests_per_hour}")
    print(f"–ú–∞–∫—Å–∏–º—É–º –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ñ–∏–ª—å–º: {config.kinopoisk.max_reviews}")
    print(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {config.kinopoisk.delay}—Å")
    print(f"TTL –∫—ç—à–∞: {config.cache.ttl}—Å")
    print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {config.data_path}")
    if config.use_existing_data:
        print(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {config.existing_data_file}")
    print("=" * 50)

if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    try:
        print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        validate_config()
        print_config_summary()
        init_directories()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)